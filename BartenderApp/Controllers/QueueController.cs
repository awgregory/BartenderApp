using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using BartenderApp.Models;

namespace BartenderApp.Controllers
{
    // This Controller contains methods to add a drink to the "ready" List and remove it from "Orders" List
    // To remove the drink from the ready List once served,  To display the Ordered View, And the Prepared View
    public class QueueController : Controller
    {
        // This list is used to hold the drinks that are ready to be served
        private static List<Drink> ready = new List<Drink>();

        // This method is used to display the ordered drinks view in tabular format
        public ActionResult ViewOrdersTable () 

        {
            return View(HomeController.Orders);
        }

       // This method adds a drink to the ready List and removes it from the Orders List then re-displays the order queue
       public RedirectToRouteResult Prepared(Drink drink)
        {
            ready.Add(drink);

            // This demonstrates an alternate way of removing object from List vs RemoveAll which Nick showed
            // var uses type inference from Orders
            var drinkToRemove = HomeController.Orders.Where(x => x.Id == drink.Id); // x rep an object in Orders            
            HomeController.Orders.Remove(drinkToRemove.FirstOrDefault());

            return RedirectToAction("ViewOrdersTable");  
        }


        // This method is used to display the prepared drinks view in tabular format
        public ActionResult ViewPreparedTable() 

        {
            return View(ready); // View autogenerated table when using List as template
        }

        
        // This method removes drink from the ready List then re-displays the prepared drinks queue
        public RedirectToRouteResult Served(Drink drink)
        {
            ready.RemoveAll(x => x.Id == drink.Id);
            return RedirectToAction("ViewPreparedTable");
        }

    }
}